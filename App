#importing necessery libraries for future analysis of the dataset
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as plt
import seaborn as sns
import time

#Read data Ubahn
loc_ubahn1=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Location/loc_ubahn1.json')
loc_ubahn2=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Location/loc_ubahn2.json')
loc_ubahn3=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Location/loc_ubahn3.json')
loc_ubahn4=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Location/loc_ubahn4.json')
loc_ubahn5=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Location/loc_ubahn5.json')
loc_ubahn6=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Location/loc_ubahn6.json')
loc_ubahn7=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Location/loc_ubahn7.json')

gy_ubahn1=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gyroscope/gy_ubahn1.json')
gy_ubahn2=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gyroscope/gy_ubahn2.json')
gy_ubahn3=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gyroscope/gy_ubahn3.json')
gy_ubahn4=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gyroscope/gy_ubahn4.json')
gy_ubahn5=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gyroscope/gy_ubahn5.json')
gy_ubahn6=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gyroscope/gy_ubahn6.json')
gy_ubahn7=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gyroscope/gy_ubahn7.json')

acc_ubahn1=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Accelerometer/acc_ubahn1.json')
acc_ubahn2=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Accelerometer/acc_ubahn2.json')
acc_ubahn3=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Accelerometer/acc_ubahn3.json')
acc_ubahn4=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Accelerometer/acc_ubahn4.json')
acc_ubahn5=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Accelerometer/acc_ubahn5.json')
acc_ubahn6=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Accelerometer/acc_ubahn6.json')
acc_ubahn7=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Accelerometer/acc_ubahn7.json')

gra_ubahn1=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gravity/gra_ubahn1.json')
gra_ubahn2=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gravity/gra_ubahn2.json')
gra_ubahn3=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gravity/gra_ubahn3.json')
gra_ubahn4=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gravity/gra_ubahn4.json')
gra_ubahn5=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gravity/gra_ubahn5.json')
gra_ubahn6=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gravity/gra_ubahn6.json')
gra_ubahn7=pd.read_json('/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Ubahn/Gravity/gra_ubahn7.json')

#Read auto data
auto_location1 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Location stadt.csv")
auto_location2 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Location.csv")
auto_location3 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Location1.csv")
auto_location4 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Location2.csv")
auto_location5 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Location3.csv")
auto_location6 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Location4.csv")
auto_accelerometer1 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Accelerometer stadt.csv")
auto_accelerometer2 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Accelerometer1.csv")
auto_accelerometer3 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Accelerometer2.csv")
auto_accelerometer4 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Accelerometer3.csv")
auto_accelerometer5 = pd.read_csv("/Users/tramduong/Desktop/Python/ML4B/Git/MaennerML/Data/Accelerometer4.csv")

#Using time as index and resample data to minute periods
for df in [loc_ubahn1, loc_ubahn2, loc_ubahn3, loc_ubahn4, loc_ubahn5, loc_ubahn6, loc_ubahn7, acc_ubahn1, acc_ubahn2, acc_ubahn3, acc_ubahn4, acc_ubahn5, acc_ubahn6, acc_ubahn7,
           gy_ubahn1, gy_ubahn2, gy_ubahn3, gy_ubahn4, gy_ubahn5, gy_ubahn6, gy_ubahn7, gra_ubahn1, gra_ubahn2, gra_ubahn3, gra_ubahn4, gra_ubahn5, gra_ubahn6, gra_ubahn7,]:
    df.index = pd.to_datetime(df['time'], unit = 'ns',errors='ignore')
    df.resample('1T').median()

#Drop column time to avoid confusion with time-indexing
for df in [loc_ubahn1, loc_ubahn2, loc_ubahn3, loc_ubahn4, loc_ubahn5, loc_ubahn6, loc_ubahn7]:
    df.drop (columns = ['time'], inplace = True)
#Cut data into windows of 3 minutes
def cut_into_windows(df):
    # Create a new DataFrame with 'time' as the index
    pivot = pd.pivot_table(loc_ubahn1, values='speed', index='time', aggfunc=[np.min, np.max, np.mean])
    # Resample the DataFrame to 3-minute intervals and calculate the sum
    tumbling = pivot.resample('3T').sum()
    return tumbling

#Combine 3-minutes windows data into one DataFrame
def combine_into_df(dfs):
    combined_df = pd.concat([cut_into_window(df) for df in dfs])  # Apply cut_into_window to each DataFrame and concatenate them
    combined_df.reset_index(drop=True, inplace=True)  # Reset the index of the combined DataFrame
    return combined_df

#Apply on location data of Ubahn
df = [loc_ubahn1, loc_ubahn2, loc_ubahn3, loc_ubahn4, loc_ubahn5, loc_ubahn6, loc_ubahn7]

#Apply on function
loc_ubahn = combine_into_df(df)
loc_ubahn.head(22)

#Add new column for traffic type
for i in range(len(loc_ubahn)):
  loc_ubahn['Type'] = 'ubahn'
loc_ubahn.head(22)

for df in [gy_ubahn1, acc_ubahn1]:
    df.index = pd.to_datetime(df['time'], unit = 'ns')

df = gy_ubahn1.join(acc_ubahn1, lsuffix = '_gyro', rsuffix = '_acce', how = 'outer').interpolate()

df.plot(figsize=(10,5))
#Tracking GPS 
import folium
import pandas as pd

coords = [(row.latitude, row.longitude) for _, row in loc_ubahn1.iterrows()]

my_map = folium.Map(location=[loc_ubahn1.latitude.mean(), loc_ubahn1.longitude.mean()], zoom_start=16)
folium.PolyLine(coords, color="blue", weight=5.0).add_to(my_map)
my_map
